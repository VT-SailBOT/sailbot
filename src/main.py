import socket, sys, json, time, modules.utils, autonomous

def generate_error(message):
    print('\033[31m\033[1m%s\033[0m\033[39m' % message)

time.sleep(5)

# Connect to the Arduino socket
try:
    arduino_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    arduino_sock.connect(("localhost", 7893))
except socket.error:
    generate_error("Could not connect to Arduino socket")
    pass


# Connect to the rudder socket
try:
    rudder_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    rudder_sock.connect(("localhost", 9107))
except socket.error:
    # Connection refused error
    generate_error("Could not connect to rudder socket")
    pass


# Connect to the wind sensor socket
try:
    winch_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    winch_sock.connect(("localhost", 9108))
except socket.error:
    # Connection refused error
    generate_error("Could not connect to wind sensor socket")
    pass


# Define servo control methods
def set_rudder_angle(angle):
    try:
        rudder_sock.send(str(angle).encode('utf-8'))
    except socket.error:
        # Broken Pipe Error
        generate_error('The rudder socket is broken!')
        pass

def set_winch_angle(angle):
    try:
        winch_sock.send(str(angle).encode('utf-8'))
    except socket.error:
        # Broken Pipe Error
        generate_error('The winch socket is broken!')
        pass

# Define the global values, as generated by the configuration file
values = {}
modules.utils.setup_config(values)

# Enter the main loop
while True:
	arduino_sock.send(str(0).encode('utf-8'))
	states = json.loads(arduino_sock.recv(128).decode('utf-8'))

	rudder_angle = float(states['rudder']) * float(values['max_rudder_angle'])
	winch_angle = (float(states['winch']) * 20) + 60

	set_rudder_angle(rudder_angle)
	set_winch_angle(winch_angle)

	print("Set %0.5f and %0.5f" % (winch_angle, rudder_angle))

    if states['switch']
        generate_error('Leaving manual control for autonomous!')
        autonomous.main()

	time.sleep(0.25)
